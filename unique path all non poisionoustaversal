    //On a 2-dimensional grid, there are 4 types of squares:

// 1 represents the starting square.  There is exactly one starting square.
// 2 represents the ending square.  There is exactly one ending square.
// 0 represents empty squares we can walk over.
// -1 represents obstacles that we cannot walk over.

//Return the number of 4-directional walks from the starting square to the ending square, that walk over every non-obstacle square exactly once.
    
    void count(vector<vector<int>>& grid,int i,int j,int n,int m,int &sx,int &sy,int &sum) // determines the count of non_obstacles block and starting index
    {
        if(j==m)
        {
            j=0;
            i++;
        }
        if(i==n)
            return;
        //cout<<i<<" "<<j<<endl;
        if(grid[i][j]==0)
            sum++;
        if(grid[i][j]==1)
        {sx=i;sy=j;}
        count(grid,i,j+1,n,m,sx,sy,sum);
    }
    int fun(vector<vector<int>>& grid,int i,int j,int n,int m,int count,vector<vector<int>>& vis)
    {
        //cout<<i<<" "<<n<<" "<<j<<" "<<m<<endl;
        if(i>=n||j>=m||i<0||j<0||grid[i][j]==-1||vis[i][j])
                return 0;
        //cout<<i<<" "<<j<<endl;
        if(grid[i][j]==2)
        {
            //cout<<count<<endl;
            if(count==0)
                return 1;
            return 0;
        }
        vis[i][j]=1;
        int x=fun(grid,i+1,j,n,m,count-1,vis)+fun(grid,i-1,j,n,m,count-1,vis)+fun(grid,i,j+1,n,m,count-1,vis)+fun(grid,i,j-1,n,m,count-1,vis);
        vis[i][j]=0;
        return x;    
    }
    int uniquePathsIII(vector<vector<int>>& grid) {
        int sx,sy,sum=0;
        int n=grid.size();
        int m=grid[0].size();
        vector<int> vc(m,0);
        vector<vector<int>> vis(n,vc);
        count(grid,0,0,n,m,sx,sy,sum);
        //cout<<n<<m<<endl;
        //cout<<sum<< " "<<sx<<" "<<sy<<endl;
        return fun(grid,sx,sy,n,m,sum+1,vis);
        //return 0;
    }
